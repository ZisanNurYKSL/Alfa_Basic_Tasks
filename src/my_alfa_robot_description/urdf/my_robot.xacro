<?xml version = "1.0"?>
<robot name="my_robot"  xmlns:xacro="http://www.ros.org/wiki/xacro"> <!--basit bir urdf dosyasında tanımlama gerçekleştiremiyorum bunun için xmlns'i de eklemeliyim-->

    <xacro:property name = "base_width" value = "0.6" />
    <xacro:property name = "base_length" value = "0.4" />
    <xacro:property name = "base_height" value = "0.2" />

    <xacro:property name = "wheel_radius" value = "0.1" />
    <xacro:property name = "wheel_length" value = "0.05" />

    <xacro:property name = "caster_wheel_radius" value = "0.05" />

   <xacro:macro name = "wheel_link" params = "prefix" >
        <link name = "${prefix}_wheel_link"><!--bunu aşağıda çağıracağım-->
            <visual>
                <geometry>
                    <cylinder radius = "${wheel_radius}" length = "${wheel_length}"/>
                </geometry>
                <origin xyz = "0 0 0 " rpy = "${pi/2} 0 0" /> <!--bu şekilde bir gösterim ile tekerimi 90 derece döndürmeyi sağlarım-->
                <material name = "black" />
            </visual>

            <collision>
                <geometry>
                    <cylinder radius = "${wheel_radius}" length = "${wheel_length}"/>
                </geometry>
                <origin xyz = "0 0 0 " rpy = "${pi/2} 0 0" /> <!--bu şekilde bir gösterim ile tekerimi 90 derece döndürmeyi sağlarım-->
            </collision>

            <xacro:cylinder_inertia m = "1.0" r = "${2*wheel_radius}" 
                                              h = "${2*wheel_length}" 
                                              xyz = "0 0 0"
                                              rpy = "${pi/2} 0 0" />
                                              <!--burada da 2* ile genişeltmeler yaparak eylemsilik momentini arttırıp daha stabil bir 
                                              durum elde etmiş olurum-->
        </link>
    </xacro:macro>

    <xacro:macro name = "caster_wheel_link" params = "prefix" >
        <link name = "${prefix}_caster_wheel_link" >  <!--bunu aşağıda çağıracağım-->
            <visual>
                <geometry>
                    <sphere radius = "${caster_wheel_radius}" />  
                </geometry>
                <origin xyz = "0 0 0 " rpy = "0 0 0" />
                <material name = "black" />
            </visual>

            <collision>
                <geometry>
                    <sphere radius = "${caster_wheel_radius}" />  
                </geometry>
                <origin xyz = "0 0 0 " rpy = "0 0 0" />
            </collision>

            <xacro:sphere_inertia m = "0.5" r = "${2*caster_wheel_radius}" 
                                            xyz = "0 0 0"
                                            rpy = "0 0 0" /> <!--seçilne kütle değerinin gerçeğe yakın olmasına dikkat etmeliyim-->
                                         <!--burada da 2* ile genişeltmeler yaparak eylemsilikmomentini arttırıp daha stabil bir 
                                              durum elde etmiş olurum-->
        </link>
    </xacro:macro>

    <link name = "base_footprint" /> <!--robotu zemindne bir miktar yukarıda tutmak için kullanırım-->

    <link name = "base_link" >
        <visual>
            <geometry>
                <box size = "${base_width} ${base_length} ${base_height}" />  <!--with, length, heigt--> 
            </geometry>
            <origin xyz = "0 0 0" rpy = "0 0 0" />
            <material name = "cyan"/>
        </visual>

        <collision>
            <geometry>
                <box size = "${base_width} ${base_length} ${base_height}" />  <!--with, length, heigt--> 
            </geometry>
            <origin xyz = "0 0 0" rpy = "0 0 0" />
        </collision>

        <xacro:box_inertia m = "5.0" l = "${2*base_length}" 
                                     w = "${2*base_width}" 
                                     h = "${2*base_height}" 
                                     xyz = "0 0 0"
                                     rpy = "0 0 0" /> <!--xyz konumu ifade ederken rpy oryantasyonu ifade ediyor.-->
                                     <!--bu değerleri bir miktar arttırdığımızda eylemsizlik momenti artacağı için daha stabil bir durum
                                     elde etmiş olurum. 2* genişleterek bu durumu düzeltemiş olurum.-->
    </link>

    <!--prefix'i aşağıdaki satırlar ile çağırıyorum-->
    <xacro:wheel_link prefix = "right" />
    <xacro:wheel_link prefix = "left" />

    <xacro:caster_wheel_link prefix = "pre_right" />
    <xacro:caster_wheel_link prefix = "pre_left" />
    <xacro:caster_wheel_link prefix = "back_right" />
    <xacro:caster_wheel_link prefix = "back_left" />

    <joint name = "base_joint" type = "fixed">
        <parent link = "base_footprint" />
        <child link = "base_link" />
        <origin xyz = "0 0 ${(base_height / 2) + wheel_radius}" rpy = "0 0 0" />  
    </joint>

    <joint name = "base_right_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "right_wheel_link" />
        <origin xyz = "${- (base_height / 2) + (wheel_radius) }
                       ${-((base_length / 2) + (wheel_length / 2))}
                       ${- wheel_radius}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>

    <joint name = "base_left_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "left_wheel_link" />
        <origin xyz = "${- (base_height / 2) + (wheel_radius) }
                       ${((base_length / 2) + (wheel_length / 2))}
                       ${- wheel_radius}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>

    <joint name = "base_pre_right_caster_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "pre_right_caster_wheel_link" />
        <origin xyz = "${-(caster_wheel_radius * 6) + (caster_wheel_radius)} 
                       ${(base_length / 2) - (caster_wheel_radius)} 
                       ${-3 * (caster_wheel_radius)}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>

    <joint name = "base_pre_left_caster_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "pre_left_caster_wheel_link" />
        <origin xyz = "${-(caster_wheel_radius * 6) + (caster_wheel_radius)} 
                       ${-(base_length / 2) + (caster_wheel_radius)} 
                       ${-3 * (caster_wheel_radius)}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>

    <joint name = "base_back_right_caster_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "back_right_caster_wheel_link" />
        <origin xyz = "${(caster_wheel_radius * 6) - (caster_wheel_radius)} 
                       ${(base_length / 2) - (caster_wheel_radius)} 
                       ${-3 * (caster_wheel_radius)}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>

    <joint name = "base_back_left_caster_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "back_left_caster_wheel_link" />
        <origin xyz = "${(caster_wheel_radius * 6) - (caster_wheel_radius)} 
                       ${-(base_length / 2) + (caster_wheel_radius)} 
                       ${-3 * (caster_wheel_radius)}" 
                       rpy = "0 0 0" />  <!--aşağı yönde kaydırdığım için - yazdım-->
        <!--sol tekerleği aslında sağ tekerlek olarak tasarlayıp fakat gerçekte sol tekerlek elde 
        ettiğim zaman bunu tekrardan sağ tekerlek yapabilmek için y eksenini - yöne çevirerek bu durumu düzeltebilrim Bu durumu yukarıdaki y ekseninde yaptım-->
        <axis xyz = "0 1 0"/>   <!--tekerleğimin istediğim yönde dönmesi için y ekseni etrafında dönmesine izin vermeliyim.
        continuous tipi eklem kullanıyorsam onun döneceği ekseni tanımlamam gerekiyordu. -->
    </joint>
</robot>
